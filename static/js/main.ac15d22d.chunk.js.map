{"version":3,"sources":["pages/home/Home.js","pages/todoList/components/Todo.js","pages/todoList/components/TodoForm.js","pages/todoList/List.js","pages/expenseTracker/components/Header.js","pages/expenseTracker/components/Balance.js","pages/expenseTracker/components/IncomeExpenses.js","pages/expenseTracker/components/TransactionList.js","pages/expenseTracker/components/AddTransaction.js","pages/expenseTracker/List.js","App.js","serviceWorker.js","index.js"],"names":["Home","to","Todo","todo","index","completeTodo","removeTodo","style","textDecoration","isCompleted","className","text","onClick","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","type","placeholder","onChange","target","List","todos","setTodos","newTodos","splice","map","key","Header","Balance","IncomeExpenses","TransactionList","AddTransaction","htmlFor","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ac15d22d.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Home = () => {\n  return (\n    <Fragment>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/todolist\">Todo List</Link>\n          </li>\n          <li>\n            <Link to=\"/expensetracker\">Expense Tracker</Link>\n          </li>\n        </ul>\n      </nav>\n    </Fragment>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nconst Todo = ({ todo, index, completeTodo, removeTodo }) => {\n  return (\n    <div\n      style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\n      className=\"todo\"\n    >\n      {todo.text}\n      <div>\n        <button onClick={() => completeTodo(index)}>Complete</button>\n        <button onClick={() => removeTodo(index)}>x</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Todo;\n","import React, { useState } from \"react\";\n\nconst TodoForm = ({ addTodo }) => {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"input\"\n        value={value}\n        placeholder=\"Add Todo...\"\n        onChange={(e) => setValue(e.target.value)}\n      />\n    </form>\n  );\n};\n\nexport default TodoForm;\n","import React, { useState } from \"react\";\nimport \"./todoList.css\";\nimport Todo from \"./components/Todo\";\nimport TodoForm from \"./components/TodoForm\";\n\nconst List = () => {\n  const [todos, setTodos] = useState([\n    {\n      text: \"Learn about React\",\n      isCompleted: false,\n    },\n    {\n      text: \"Meet friend for lunch\",\n      isCompleted: false,\n    },\n    {\n      text: \"Build really cool todo app\",\n      isCompleted: false,\n    },\n  ]);\n\n  const addTodo = (text) => {\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = (index) => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = !newTodos[index].isCompleted;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = (index) => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n","import React from 'react'\n\nexport const Header = () => {\n  return (\n    <h2>\n      Expense Tracker\n    </h2>\n  )\n}\n","import React, { Fragment } from 'react'\n\nexport const Balance = () => {\n  return (\n    <Fragment>\n      <h4>Your Balance</h4>\n      <h1>$0.00</h1>\n    </Fragment>\n  )\n}\n","import React from 'react'\n\nexport const IncomeExpenses = () => {\n  return (\n    <div className=\"inc-exp-container\">\n      <div>\n        <h4>Income</h4>\n        <p className=\"money plus\">+$0.00</p>\n      </div>\n      <div>\n        <h4>Expense</h4>\n        <p className=\"money minus\">-$0.00</p>\n      </div>\n    </div>\n  )\n}\n","import React, { Fragment } from 'react'\n\nexport const TransactionList = () => {\n  return (\n    <Fragment>\n      <h3>History</h3>\n      <ul className=\"list\">\n        <li className=\"minus\">\n          Cash <span>-$400</span><button className=\"delete-btn\">x</button>\n        </li>\n      </ul>\n    </Fragment>\n  )\n}\n","import React, { Fragment } from 'react'\n\nexport const AddTransaction = () => {\n  return (\n    <Fragment>\n      <h3>Add new transaction</h3>\n      <form>\n        <div className=\"form-control\">\n          <label htmlFor=\"text\">Text</label>\n          <input type=\"text\" placeholder=\"Enter text...\" />\n        </div>\n        <div className=\"form-control\">\n          <label htmlFor=\"about\">\n            Amount <br />\n            (negative - expense, positive - income)\n          </label>\n          <input type=\"number\" placeholder=\"Enter amount...\" />\n        </div>\n        <button className=\"btn\">Add transaction</button>\n      </form>\n    </Fragment>\n  )\n}\n","import React from \"react\";\nimport { Header } from \"./components/Header\";\nimport { Balance } from \"./components/Balance\";\nimport { IncomeExpenses } from \"./components/IncomeExpenses\";\nimport { TransactionList } from \"./components/TransactionList\";\nimport { AddTransaction } from \"./components/AddTransaction\";\nimport \"./expenseTracker.css\";\n\nconst List = () => {\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpenses />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Home from \"./pages/home/Home\";\nimport TodoList from \"./pages/todoList/List\";\nimport ExpenseTrackerList from './pages/expenseTracker/List'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/todolist\">\n          <TodoList />\n        </Route>\n        <Route exact path=\"/expensetracker\">\n          <ExpenseTrackerList />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}